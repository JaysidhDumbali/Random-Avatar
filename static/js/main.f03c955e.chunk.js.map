{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box-component.jsx","components/refresh-button/refresh-button-component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","href","src","Math","floor","random","alt","data","name","CardList","map","key","id","SearchBox","placeholder","handleChange","type","onChange","RefreshButton","action","faIcon","onClick","App","e","setState","searchField","target","value","refreshPage","refresh","state","avatar","fetch","then","response","json","users","this","filteredAvatars","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yVAUeA,G,kBAPF,SAACC,GAAD,OACT,yBAAKC,UAAU,kBACX,uBAAGC,KAAK,4BAA2B,yBAAKC,IAAG,+BAA0BC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAA5D,0BAAwFC,IAAI,UACvI,gCAAOP,EAAMQ,KAAKC,KAAlB,QCaOC,EAbE,SAACV,GAEd,OACA,yBAAKC,UAAU,aAETD,EAAMQ,KAAKG,KAAI,SAAAH,GAAI,OACjB,kBAAC,EAAD,CAAMI,IAAKJ,EAAKK,GAAIL,KAAMA,SCAvBM,G,MARG,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACd,2BAAOf,UAAU,SACjBgB,KAAK,SACLF,YAAeA,EACfG,SAAUF,MCGCG,G,MAPO,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAOC,EAAT,EAASA,OAAT,OAClB,4BAAQpB,UAAU,eAAeqB,QAASF,GACtC,uBAAGnB,UAAWoB,OCwCPE,E,kDAtCb,aAAc,IAAD,8BACX,gBAcFP,aAAe,SAACQ,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhB1B,EAmBbC,YAAc,SAACL,GACb,EAAKC,SAAS,CAACK,SAAS,KAlBxB,EAAKC,MAAQ,CACXC,OAAQ,GACRN,YAAY,GACZI,SAAS,GALA,E,gEASO,IAAD,OACjBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACO,OAAQK,S,+BAW9B,IAAD,EACsBC,KAAKP,MAA3BC,EADA,EACAA,OAAON,EADP,EACOA,YACRa,EAAkBP,EAAOQ,QAAO,SAAAR,GAAM,OAC1CA,EAAOvB,KAAKgC,cAAcC,SAAUhB,EAAYe,kBAElD,OACE,yBAAKxC,UAAY,QAAjB,IACE,6CAAkB,kBAAC,EAAD,CAAemB,OAAQkB,KAAKT,YAAaR,OAAO,yBAClE,kBAAC,EAAD,CAAWN,YAAY,gBAAgBC,aAAcsB,KAAKtB,eAC1D,kBAAC,EAAD,CAAUR,KAAM+B,GAAhB,U,GAjCUI,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f03c955e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-styles.css'\r\n\r\nconst Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <a href=\"https://www.somesite.com\"><img src={`https://robohash.org/${Math.floor((Math.random() * 10) + 1)}?set=set5&size=180x180`} alt=\"Logo\" /></a>\r\n        <h2 > {props.data.name} </h2>\r\n    </div>\r\n);\r\n\r\nexport default Card;\r\n","\r\nimport React from 'react';\r\nimport './card-list.styles.css';\r\nimport Card from '../card/card-component.jsx';\r\n\r\n\r\nconst CardList = (props) => { \r\n    /*props passed from app.js is added here and we are looping through each of that props hash*/\r\n    return (\r\n    <div className='card-list'>\r\n        {\r\n          props.data.map(data=> (\r\n            <Card key={data.id} data={data}></Card>\r\n          ))\r\n        }\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\n\r\nconst SearchBox = ({placeholder, handleChange}) => (\r\n    <input className='search'\r\n    type='search'\r\n    placeholder = {placeholder}\r\n    onChange={handleChange}>\r\n  </input>\r\n)\r\n\r\nexport default SearchBox","import React from 'react';\r\nimport './refresh-button.styles.css';\r\n\r\n\r\nconst RefreshButton = ({action,faIcon}) =>(\r\n    <button className=\"customButton\" onClick={action} >\r\n        <i className={faIcon}></i> \r\n    </button>\r\n\r\n)\r\n\r\nexport default RefreshButton","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport  CardList from './components/card-list/card-list.component.jsx';\r\nimport SearchBox from './components/search-box/search-box-component';\r\nimport RefreshButton from './components/refresh-button/refresh-button-component'\r\n\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      avatar: [],\r\n      searchField:'',\r\n      refresh: true\r\n    };\r\n  };\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({avatar: users}));\r\n  };\r\n\r\n  handleChange = (e) =>{\r\n    this.setState({searchField: e.target.value})\r\n  };\r\n\r\n  refreshPage = (e) => {\r\n    this.setState({refresh: true})\r\n  }\r\n\r\n  render() {\r\n    const {avatar,searchField} = this.state;\r\n    const filteredAvatars = avatar.filter(avatar =>\r\n      avatar.name.toLowerCase().includes (searchField.toLowerCase())\r\n      )\r\n    return(\r\n      <div className = 'App '> {/*Here className is the CSS class to use*/}\r\n        <h1>Random Avatar <RefreshButton action={this.refreshPage} faIcon=\"fa fa-refresh fa-lg\"></RefreshButton></h1>\r\n        <SearchBox placeholder=\"Search Avatar\" handleChange={this.handleChange}></SearchBox>\r\n        <CardList data={filteredAvatars}> {/*Here we are passing the attribute data as a prop(attribute of html like width=\"50px\"). We are sending the object avatar which is set in this.state*/}\r\n        </CardList>\r\n      </div>\r\n    )\r\n  }\r\n} ;\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}